---
description: 
globs: 
alwaysApply: false
---
# üñ•Ô∏è CLI Rules

## CLI System Overview

**Framework**: nest-commander for NestJS-integrated CLI commands
**Purpose**: Database management and administrative tasks

## Command Structure

### Entry Point
```bash
# CLI entry point
npm run cli [command] [subcommand] [options]

# Examples:
npm run cli db merge
npm run cli db migrate my-feature 
npm run cli --help
```

### Available Commands

#### Database Commands (`db`)
```bash
npm run cli db merge              # Merge modular schemas
npm run cli db generate           # Generate Prisma client
npm run cli db migrate [name]     # Create/apply migrations
npm run cli db status             # Show database status
npm run cli db health             # Health check
```

#### Help Commands
```bash
npm run cli --help               # Show all commands
npm run cli db                   # Show database command help
```

## Command Implementation Rules

### File Structure
```
src/cli/
‚îú‚îÄ‚îÄ cli.module.ts              # CLI module definition
‚îú‚îÄ‚îÄ cli.ts                     # Entry point
‚îî‚îÄ‚îÄ commands/
    ‚îî‚îÄ‚îÄ database.command.ts    # Database commands
```

### Command Class Pattern
```typescript
@Command({ 
  name: 'command-name', 
  description: 'Clear description of what this command does'
})
export class SomeCommand extends CommandRunner {
  private readonly logger = new Logger(SomeCommand.name);

  constructor() {
    super();
  }

  async run(passedParams: string[]): Promise<void> {
    // Command implementation
  }
}
```

### Error Handling Pattern
```typescript
private async someOperation(): Promise<void> {
  try {
    this.logger.log('üîÑ Starting operation...');
    
    // Perform operation
    execSync('some-command', { stdio: 'inherit' });
    
    this.logger.log('‚úÖ Operation completed successfully!');
  } catch (error) {
    this.logger.error('‚ùå Operation failed');
    process.exit(1); // Always exit with error code
  }
}
```

### Logging Standards
```typescript
// Use emojis for visual clarity
this.logger.log('üîÑ Processing...');    // In progress
this.logger.log('‚úÖ Success!');          // Success
this.logger.error('‚ùå Failed');          // Error
this.logger.warn('‚ö†Ô∏è Warning');          // Warning
this.logger.log('üìä Status info');       // Information
this.logger.log('üè• Health check');      // Health/diagnostic
this.logger.log('üßπ Cleaning...');       // Maintenance
```

## Database Command Rules

### Schema Operations (No Database Required)
```typescript
// These commands work without DATABASE_URL
async merge(): Promise<void> {
  // Merge modular schemas using execSync
  execSync('node scripts/merge-schema.js', { stdio: 'inherit' });
}

async generate(): Promise<void> {
  // Always merge first, then generate
  execSync('node scripts/merge-schema.js', { stdio: 'pipe' });
  execSync('npx prisma generate', { stdio: 'inherit' });
}
```

### Database Operations (Require DATABASE_URL)
```typescript
async migrate(name?: string): Promise<void> {
  try {
    // Always merge schemas first
    execSync('node scripts/merge-schema.js', { stdio: 'pipe' });
    
    if (name) {
      // Create new migration
      execSync(`npx prisma migrate dev --name ${name}`, { stdio: 'inherit' });
    } else {
      // Apply pending migrations
      execSync('npx prisma migrate deploy', { stdio: 'inherit' });
    }
  } catch (error) {
    this.logger.error('‚ùå Migration failed (DATABASE_URL required)');
    process.exit(1);
  }
}
```

### Parameter Handling
```typescript
async run(passedParams: string[]): Promise<void> {
  const command = passedParams[0];
  const param = passedParams[1];
  
  switch (command) {
    case 'merge':
      await this.merge();
      break;
    case 'migrate':
      await this.migrate(param); // Pass parameter
      break;
    default:
      this.showHelp();
  }
}
```

## Help System Rules

### Help Display Pattern
```typescript
private showHelp(): void {
  this.logger.log('\nüóÑÔ∏è  Database CLI Commands\n');
  this.logger.log('Available commands:');
  this.logger.log('  merge       - Merge modular schema files');
  this.logger.log('  generate    - Generate Prisma client');
  this.logger.log('  migrate     - Apply migrations (requires DATABASE_URL)');
  this.logger.log('  status      - Show database status (requires DATABASE_URL)');
  this.logger.log('  health      - Run health check (requires DATABASE_URL)');
  this.logger.log('\nExamples:');
  this.logger.log('  npm run cli db merge');
  this.logger.log('  npm run cli db generate');
  this.logger.log('  npm run cli db migrate my-feature-name');
}
```

### Requirement Indicators
```typescript
// Clearly indicate which commands need database
this.logger.log('  merge       - Merge modular schema files');                    // No DB
this.logger.log('  generate    - Generate Prisma client');                        // No DB  
this.logger.log('  migrate     - Apply migrations (requires DATABASE_URL)');      // Needs DB
this.logger.log('  status      - Show database status (requires DATABASE_URL)'); // Needs DB
```

## Module Configuration Rules

### CLI Module Setup
```typescript
@Module({
  imports: [
    ConfigModule.forRoot({
      isGlobal: true,
    }),
    // Don't import PrismaModule to avoid database connection requirement
  ],
  providers: [
    DatabaseCommand,
  ],
})
export class CliModule {}
```

### Entry Point Configuration
```typescript
// src/cli.ts
import { CommandFactory } from 'nest-commander';
import { CliModule } from './cli/cli.module';

async function bootstrap() {
  await CommandFactory.run(CliModule, {
    logger: ['log', 'warn', 'error'],
    errorHandler: (error) => {
      console.error('‚ùå CLI Error:', error.message);
      process.exit(1);
    },
  });
}
```

## Command Development Guidelines

### Adding New Commands

1. **Create command class**:
```typescript
@Command({ 
  name: 'new-command', 
  description: 'Description of new command'
})
export class NewCommand extends CommandRunner {
  // Implementation
}
```

2. **Add to CLI module**:
```typescript
@Module({
  providers: [
    DatabaseCommand,
    NewCommand, // Add here
  ],
})
export class CliModule {}
```

3. **Follow patterns**:
   - Use proper logging with emojis
   - Handle errors gracefully
   - Show helpful error messages
   - Exit with proper codes

### Command Categories

**Schema Management** (No database required):
- Schema merging
- Client generation
- Schema validation

**Database Operations** (Database required):
- Migrations
- Health checks
- Status queries
- Data maintenance

**Administrative** (Context dependent):
- User management
- Permission setup
- Audit log cleanup

## Testing CLI Commands

### Manual Testing
```bash
# Test without database
npm run cli db merge
npm run cli db generate

# Test help system
npm run cli --help
npm run cli db

# Test with database (requires DATABASE_URL)
export DATABASE_URL="file:./test.db"
npm run cli db status
npm run cli db health
```

### Error Scenarios
```bash
# Test missing parameters
npm run cli db migrate  # Should show help or error

# Test invalid commands  
npm run cli db invalid  # Should show help

# Test database commands without URL
unset DATABASE_URL
npm run cli db status   # Should show helpful error
```

## Environment Handling

### Environment Variables
```typescript
// Commands should handle missing environment gracefully
if (!process.env.DATABASE_URL) {
  this.logger.error('‚ùå DATABASE_URL required for this operation');
  this.logger.log('Set DATABASE_URL environment variable and try again');
  process.exit(1);
}
```

### Cross-Platform Compatibility
```typescript
// Use execSync with proper options
execSync('npx prisma generate', { 
  stdio: 'inherit',      // Show output
  cwd: process.cwd(),    // Ensure correct working directory
  env: process.env       // Pass environment variables
});
```

## Performance Considerations

### Output Management
```typescript
// For silent operations (like in other commands)
execSync('node scripts/merge-schema.js', { stdio: 'pipe' });

// For interactive operations (user should see output)
execSync('npx prisma migrate dev --name feature', { stdio: 'inherit' });
```

### Command Chaining
```typescript
// Always merge schemas before Prisma operations
async migrate(name?: string): Promise<void> {
  // Silent merge first
  execSync('node scripts/merge-schema.js', { stdio: 'pipe' });
  
  // Then the main operation with output
  if (name) {
    execSync(`npx prisma migrate dev --name ${name}`, { stdio: 'inherit' });
  }
}
```

# üîß CLI & Command Rules

## CLI Architecture

**System**: nest-commander based database management CLI

### CLI Structure
```
src/cli/
‚îú‚îÄ‚îÄ cli.module.ts           # CLI module configuration
‚îú‚îÄ‚îÄ cli.ts                  # Main CLI entry point
‚îî‚îÄ‚îÄ commands/
    ‚îî‚îÄ‚îÄ database.command.ts # Database management commands
```

### Entry Point
```typescript
// src/cli.ts
import { CommandFactory } from 'nest-commander';
import { CliModule } from './cli/cli.module';

async function bootstrap() {
  await CommandFactory.run(CliModule, {
    logger: ['log', 'warn', 'error'],
    errorHandler: (error) => {
      console.error('‚ùå CLI Error:', error.message);
      process.exit(1);
    },
  });
}
```

## Command Patterns

### Command Structure
```typescript
@Command({ 
  name: 'command-name', 
  description: 'Clear description' 
})
export class SomeCommand extends CommandRunner {
  private readonly logger = new Logger(SomeCommand.name);
  
  constructor() {
    super();
  }

  async run(passedParams: string[]): Promise<void> {
    const command = passedParams[0];
    
    switch (command) {
      case 'action':
        await this.handleAction();
        break;
      default:
        this.showHelp();
    }
  }
}
```

### Error Handling Pattern
```typescript
private async handleAction(): Promise<void> {
  try {
    this.logger.log('üîÑ Starting operation...');
    // Implementation
    this.logger.log('‚úÖ Operation completed successfully!');
  } catch (error) {
    this.logger.error('‚ùå Operation failed');
    process.exit(1);
  }
}
```

### Logging Standards
```typescript
// Use emoji prefixes for visual clarity
this.logger.log('üîÑ Processing...');    // In progress
this.logger.log('‚úÖ Success message');   // Success
this.logger.log('‚ö†Ô∏è Warning message');   // Warning  
this.logger.error('‚ùå Error message');   // Error
this.logger.log('üìä Status info');       // Information
this.logger.log('üè• Health check');      // Health/diagnostics
this.logger.log('üßπ Cleanup');           // Maintenance
```

## Database Commands

### Current Commands
```bash
npm run cli db merge              # Merge modular schemas
npm run cli db generate           # Generate Prisma client  
npm run cli db migrate [name]     # Create/apply migrations
npm run cli db status             # Migration status
npm run cli db health             # Database health check
```

### Command Implementation
```typescript
@Command({ name: 'db', description: 'Database management commands' })
export class DatabaseCommand extends CommandRunner {
  
  async run(passedParams: string[]): Promise<void> {
    const command = passedParams[0];
    
    switch (command) {
      case 'merge':
        await this.merge();
        break;
      case 'generate':  
        await this.generate();
        break;
      case 'migrate':
        await this.migrate(passedParams[1]);
        break;
      default:
        this.showHelp();
    }
  }
}
```

### Schema Merging Command
```typescript
private async merge(): Promise<void> {
  try {
    this.logger.log('üîÑ Merging schema files...');
    execSync('node scripts/merge-schema.js', { stdio: 'inherit' });
    this.logger.log('‚úÖ Schema files merged successfully!');
  } catch (error) {
    this.logger.error('‚ùå Failed to merge schema files');
    process.exit(1);
  }
}
```

### Migration Command
```typescript
private async migrate(name?: string): Promise<void> {
  try {
    if (name) {
      this.logger.log(`üîÑ Creating migration: ${name}`);
      execSync('node scripts/merge-schema.js', { stdio: 'pipe' });
      execSync(`npx prisma migrate dev --name ${name}`, { stdio: 'inherit' });
    } else {
      this.logger.log('üîÑ Applying migrations...');
      execSync('node scripts/merge-schema.js', { stdio: 'pipe' });
      execSync('npx prisma migrate deploy', { stdio: 'inherit' });
    }
    this.logger.log('‚úÖ Migration completed successfully!');
  } catch (error) {
    this.logger.error('‚ùå Migration failed');
    process.exit(1);
  }
}
```

## Command Rules

### Environment Handling
```typescript
// Commands that don't require database
‚úÖ merge      - Schema merging (file operations only)
‚úÖ generate   - Client generation (file operations only)

// Commands that require DATABASE_URL
‚ö†Ô∏è migrate    - Database operations
‚ö†Ô∏è status     - Migration status check
‚ö†Ô∏è health     - Database connectivity check
```

### Parameter Validation
```typescript
private async migrate(name?: string): Promise<void> {
  if (name && !/^[a-z0-9-_]+$/.test(name)) {
    this.logger.error('‚ùå Migration name must contain only lowercase letters, numbers, hyphens, and underscores');
    process.exit(1);
  }
  
  if (name && name.length > 50) {
    this.logger.error('‚ùå Migration name must be 50 characters or less');
    process.exit(1);
  }
}
```

### Help System
```typescript
private showHelp(): void {
  this.logger.log('\nüóÑÔ∏è  Database CLI Commands\n');
  this.logger.log('Available commands:');
  this.logger.log('  merge       - Merge modular schema files');
  this.logger.log('  generate    - Generate Prisma client');
  this.logger.log('  migrate     - Apply migrations (requires DATABASE_URL)');
  this.logger.log('  status      - Show database status (requires DATABASE_URL)');
  this.logger.log('  health      - Run health check (requires DATABASE_URL)');
  this.logger.log('\nExamples:');
  this.logger.log('  npm run cli db merge');
  this.logger.log('  npm run cli db generate');
  this.logger.log('  npm run cli db migrate my-feature-name');
}
```

## Adding New Commands

### New Command Structure
```typescript
// 1. Create command class
@Command({ 
  name: 'new-command', 
  description: 'Description of new command' 
})
export class NewCommand extends CommandRunner {
  private readonly logger = new Logger(NewCommand.name);
  
  async run(passedParams: string[]): Promise<void> {
    // Implementation
  }
}

// 2. Add to CLI module
@Module({
  providers: [
    DatabaseCommand,
    NewCommand,  // Add here
  ],
})
export class CliModule {}

// 3. Update package.json if needed
"scripts": {
  "new-cmd": "ts-node src/cli.ts new-command"
}
```

### Command Categories
```typescript
// Database operations
npm run cli db [action]

// Future command categories
npm run dev:cli dev [action]        # Development utilities
npm run cache:cli cache [action]    # Cache management  
npm run security:cli security [action] # Security operations
```

## Development Workflow

### CLI Development Rules
```typescript
// 1. Use dependency injection where possible
constructor(
  private configService: ConfigService,
  private prismaService?: PrismaService  // Optional for non-DB commands
) {}

// 2. Handle both success and failure cases
try {
  // Operation
  this.logger.log('‚úÖ Success');
} catch (error) {
  this.logger.error('‚ùå Failed');
  process.exit(1);  // Exit with error code
}

// 3. Provide clear feedback
this.logger.log('üîÑ Starting...');   // Start
this.logger.log('üìä Status info');   // Progress  
this.logger.log('‚úÖ Complete');      // Finish
```

### Testing CLI Commands
```typescript
// Test individual command methods
describe('DatabaseCommand', () => {
  let command: DatabaseCommand;
  
  beforeEach(() => {
    command = new DatabaseCommand();
  });
  
  it('should merge schemas successfully', async () => {
    // Mock execSync
    jest.spyOn(require('child_process'), 'execSync').mockImplementation();
    
    await command.merge();
    
    expect(execSync).toHaveBeenCalledWith('node scripts/merge-schema.js', { stdio: 'inherit' });
  });
});
```

## Package.json Scripts

### Current Scripts
```json
{
  "scripts": {
    "cli": "ts-node src/cli.ts",
    "merge": "node scripts/merge-schema.js",
    "migrate": "npm run merge && prisma migrate dev",
    "generate": "npm run merge && prisma generate",
    "studio": "npm run merge && prisma studio"
  }
}
```

### Script Rules
- ‚úÖ CLI scripts use `ts-node src/cli.ts` entry point
- ‚úÖ Database scripts auto-merge schemas before operations
- ‚úÖ Use descriptive script names
- ‚ùå Don't duplicate functionality between scripts and CLI 