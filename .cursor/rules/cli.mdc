---
description: 
globs: 
alwaysApply: false
---
# 🔧 CLI & Database Management Rules

## CLI System Overview

**Framework**: nest-commander based CLI system
**Purpose**: Database management and utility commands
**Entry Point**: `src/cli.ts`

## Database Commands

### Command Structure
```bash
# Main command
npm run cli db [command] [options]

# Examples
npm run cli db                    # Generate Prisma client
npm run cli db generate           # Generate client only
npm run cli db migrate my-feature # Create migration
npm run cli db studio             # Open Prisma Studio
```

### Available Commands

#### Generate Client
```bash
npm run cli db generate
```
- Generates Prisma client from schema
- No database connection required
- Updates TypeScript types

#### Migrations
```bash
# Create new migration
npm run cli db migrate add-feature-name

# Apply migrations
npm run cli db migrate
```
- Creates or applies database migrations
- Requires DATABASE_URL
- Uses standard Prisma migration commands

#### Database Tools
```bash
npm run cli db studio    # Open Prisma Studio
npm run cli db status    # Show migration status
npm run cli db health    # Database health check
npm run cli db seed      # Seed database
```

## Command Implementation

### Database Command Class
```typescript
@Command({ 
  name: 'db', 
  description: 'Database management commands'
})
export class DatabaseCommand extends CommandRunner {
  async run(passedParams: string[]): Promise<void> {
    const command = passedParams[0];
    
    // Default: generate client
    if (!command || command === 'sync') {
      await this.sync();
      return;
    }
    
    switch (command) {
      case 'generate':
        await this.generate();
        break;
      case 'migrate':
        await this.migrate(passedParams[1]);
        break;
      case 'studio':
        await this.studio();
        break;
      case 'status':
        await this.status();
        break;
      case 'health':
        await this.health();
        break;
      case 'seed':
        await this.seed();
        break;
      default:
        this.showHelp();
    }
  }
}
```

### Command Methods
```typescript
private async generate(): Promise<void> {
  try {
    console.log('🔄 Generating Prisma client...');
    execSync('npx prisma generate', { stdio: 'inherit' });
    console.log('✅ Prisma client generated successfully!');
  } catch (error) {
    console.error('❌ Failed to generate client:', error.message);
    process.exit(1);
  }
}

private async migrate(name?: string): Promise<void> {
  try {
    if (name) {
      console.log(`🔄 Creating migration: ${name}`);
      execSync(`npx prisma migrate dev --name ${name}`, { stdio: 'inherit' });
    } else {
      console.log('🔄 Applying migrations...');
      execSync('npx prisma migrate deploy', { stdio: 'inherit' });
    }
    console.log('✅ Migration completed successfully!');
  } catch (error) {
    console.error('❌ Migration failed:', error.message);
    process.exit(1);
  }
}
```

## Environment Handling

### Commands that don't require database
```bash
✅ generate   - Client generation (file operations only)
✅ studio     - Opens web interface (file operations only)
```

### Commands that require DATABASE_URL
```bash
⚠️ migrate    - Database operations
⚠️ status     - Migration status check
⚠️ health     - Database connectivity check
⚠️ seed       - Database seeding
```

### Parameter Validation
```typescript
private async migrate(name?: string): Promise<void> {
  if (name && !/^[a-z0-9-_]+$/.test(name)) {
    this.logger.error('❌ Migration name must contain only lowercase letters, numbers, hyphens, and underscores');
    process.exit(1);
  }
  
  if (name && name.length > 50) {
    this.logger.error('❌ Migration name must be 50 characters or less');
    process.exit(1);
  }
}
```

## Help System

### Command Help
```typescript
private showHelp(): void {
  console.log('\n🚀 Database Commands');
  console.log('\nUsage:');
  console.log('  cli db                    # Default: generate Prisma client');
  console.log('  cli db [command]          # Specific command');
  
  console.log('\n⚡ Quick Commands:');
  console.log('  cli db                    Generate Prisma client');
  
  console.log('\n🔧 Specific Commands:');
  console.log('  generate                  Generate Prisma client only');
  console.log('  migrate [name]            Create/apply migrations');
  console.log('  seed                      Seed database with sample data');
  console.log('  studio                    Open Prisma Studio');
  console.log('  status                    Show migration status');
  console.log('  health                    Database health check');
  
  process.exit(0);
}
```

## Error Handling

### Standard Error Pattern
```typescript
try {
  // Command execution
  execSync('npx prisma generate', { stdio: 'inherit' });
  console.log('✅ Operation completed successfully!');
} catch (error) {
  console.error('❌ Operation failed:', error.message);
  process.exit(1);
}
```

### Environment Validation
```typescript
private validateDatabaseUrl(): void {
  if (!process.env.DATABASE_URL) {
    console.error('❌ DATABASE_URL environment variable is required');
    process.exit(1);
  }
}
```

## Testing CLI Commands

### Unit Testing
```typescript
describe('DatabaseCommand', () => {
  let command: DatabaseCommand;

  beforeEach(() => {
    command = new DatabaseCommand();
  });

  it('should generate client successfully', async () => {
    jest.spyOn(execSync, 'execSync').mockImplementation(() => Buffer.from(''));
    
    await command.generate();
    
    expect(execSync).toHaveBeenCalledWith('npx prisma generate', { stdio: 'inherit' });
  });

  it('should show help for unknown command', async () => {
    const consoleSpy = jest.spyOn(console, 'log').mockImplementation();
    const exitSpy = jest.spyOn(process, 'exit').mockImplementation();
    
    await command.run(['unknown']);
    
    expect(consoleSpy).toHaveBeenCalledWith(expect.stringContaining('Database Commands'));
    expect(exitSpy).toHaveBeenCalledWith(0);
  });
});
```

## Package.json Scripts

### Recommended Scripts
```json
{
  "scripts": {
    "cli": "nest-commander",
    "db": "npm run cli db",
    "db:generate": "npm run cli db generate",
    "db:migrate": "npm run cli db migrate",
    "db:studio": "npm run cli db studio",
    "db:status": "npm run cli db status",
    "db:health": "npm run cli db health",
    "db:seed": "npm run cli db seed"
  }
}
```

## Best Practices

### Command Naming
```bash
✅ add-user-authentication
✅ update-post-schema
✅ fix-email-validation
❌ migration1
❌ update
❌ fix
```

### Error Messages
```typescript
// ✅ Clear, actionable error messages
console.error('❌ DATABASE_URL environment variable is required');
console.error('❌ Migration name must be 50 characters or less');

// ❌ Vague error messages
console.error('❌ Something went wrong');
console.error('❌ Error occurred');
```

### Logging Standards
```typescript
// ✅ Consistent emoji usage
console.log('🔄 Generating Prisma client...');
console.log('✅ Prisma client generated successfully!');
console.log('❌ Failed to generate client');

// ✅ Include context
console.log(`🔄 Creating migration: ${name}`);
console.log(`📊 Migration status for: ${databaseUrl}`);
```

### Command Structure
```typescript
// ✅ Consistent command structure
async run(passedParams: string[]): Promise<void> {
  const command = passedParams[0];
  
  if (!command) {
    await this.defaultAction();
    return;
  }
  
  switch (command) {
    case 'action1':
      await this.action1(passedParams.slice(1));
      break;
    case 'action2':
      await this.action2(passedParams.slice(1));
      break;
    default:
      this.showHelp();
  }
}
```

## Integration with NestJS

### Module Setup
```typescript
@Module({
  imports: [
    ConfigModule.forRoot({
      isGlobal: true,
    }),
  ],
  providers: [
    DatabaseCommand,
  ],
})
export class CliModule {}
```

### Bootstrap
```typescript
#!/usr/bin/env node

import { CommandFactory } from 'nest-commander';
import { CliModule } from './cli/cli.module';

async function bootstrap() {
  await CommandFactory.run(CliModule, {
    logger: false,
    errorHandler: (error) => {
      if (error.message.includes('help')) {
        process.exit(0);
      }
      console.error('CLI Error:', error.message);
      process.exit(1);
    },
  });
}

bootstrap();
``` 