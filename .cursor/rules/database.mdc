---
description: 
globs: 
alwaysApply: false
---
# üóÑÔ∏è Database & Prisma Rules

## Schema System

**Philosophy**: Use a single Prisma schema file for the entire application

### Schema Organization

```
prisma/
‚îú‚îÄ‚îÄ schema.prisma               # Main schema file
‚îî‚îÄ‚îÄ migrations/                 # Database migrations
```

### Schema Naming Rules

**Files**: Single `schema.prisma` file in the `prisma/` directory
```
‚úÖ prisma/schema.prisma
‚ùå src/modules/users/users.prisma (modular schemas not used)
‚ùå src/modules/posts/posts.prisma (modular schemas not used)
```

**Models**: PascalCase
```prisma
‚úÖ model User { }
‚úÖ model AuditLog { }
‚úÖ model RolePermission { }
‚ùå model user { }
‚ùå model auditlog { }
```

**Fields**: camelCase
```prisma
‚úÖ userId: Int
‚úÖ createdAt: DateTime
‚úÖ assignedBy: Int
‚ùå user_id: Int
‚ùå created_at: DateTime
```

**Tables**: snake_case via @@map
```prisma
model User {
  // ... fields
  @@map("users")
}

model AuditLog {
  // ... fields  
  @@map("audit_logs")
}
```

## Database Workflow

**CRITICAL**: Use standard Prisma commands directly

### Manual Workflow
```bash
# Generate Prisma client
npx prisma generate

# Create migration
npx prisma migrate dev --name feature-name

# Apply migrations
npx prisma migrate deploy
```

### CLI Commands
```bash
# Database management via CLI
npm run cli db generate              # ‚úÖ Generate client
npm run cli db migrate [name]        # ‚úÖ Create/apply migrations
npm run cli db studio                # ‚úÖ Open Prisma Studio
npm run cli db status                # ‚úÖ Show migration status
npm run cli db health                # ‚úÖ Database health check
npm run cli db seed                  # ‚úÖ Seed database
```

## Migration Rules

### Migration Naming
```bash
‚úÖ add-permissions-and-audit-system
‚úÖ update-user-roles-structure  
‚úÖ add-post-categories
‚ùå migration1
‚ùå update
‚ùå fix
```

### Migration Safety
```bash
# Safe operations (no data loss)
‚úÖ Adding new tables
‚úÖ Adding new columns (nullable)
‚úÖ Adding indexes
‚úÖ Adding constraints (if data complies)

# Dangerous operations (review carefully)
‚ö†Ô∏è Dropping columns
‚ö†Ô∏è Changing column types
‚ö†Ô∏è Adding non-nullable columns to existing tables
‚ö†Ô∏è Dropping tables with data
```

### Migration Process
```bash
# 1. Create migration with descriptive name
npm run cli db migrate add-new-feature

# 2. Review generated migration
# Check: prisma/migrations/[timestamp]_add-new-feature/

# 3. Test on development database
npm run cli db status

# 4. Deploy to production
npm run cli db migrate
```

## Database Configuration

### Environment Variables
```env
# Required
DATABASE_URL="postgresql://user:pass@localhost:5432/blog"

# Development (SQLite)  
DATABASE_URL="file:./dev.db"

# Production (PostgreSQL recommended)
DATABASE_URL="postgresql://user:pass@host:5432/blog"
```

### Prisma Configuration
```prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
```

## Service Patterns

### Service-Only Pattern (Recommended)
```typescript
@Injectable()
export class UserService {
  constructor(private prisma: PrismaService) {}
  
  async findById(id: number): Promise<User | null> {
    return this.prisma.user.findUnique({ where: { id } });
  }
  
  async create(data: CreateUserInput): Promise<User> {
    // Business logic + data access in one place
    const existing = await this.prisma.user.findUnique({
      where: { email: data.email }
    });
    if (existing) throw new ConflictException('Email exists');
    
    return this.prisma.user.create({ data });
  }
}
```

### Error Handling
```typescript
// Service error handling
async findById(id: number): Promise<User> {
  const user = await this.prisma.user.findUnique({ where: { id } });
  
  if (!user) {
    throw new NotFoundException(`User with ID ${id} not found`);
  }
  
  return user;
}

// Conflict handling
async create(data: CreateUserInput): Promise<User> {
  try {
    return await this.prisma.user.create({ data });
  } catch (error) {
    if (error.code === 'P2002') {
      throw new ConflictException('Email already exists');
    }
    throw error;
  }
}
```

## Testing Patterns

### Unit Testing
```typescript
describe('UserService', () => {
  let service: UserService;
  let prisma: PrismaService;

  beforeEach(async () => {
    const module = await Test.createTestingModule({
      providers: [
        UserService,
        {
          provide: PrismaService,
          useValue: {
            user: {
              findUnique: jest.fn(),
              create: jest.fn(),
            },
          },
        },
      ],
    }).compile();
    
    service = module.get<UserService>(UserService);
    prisma = module.get<PrismaService>(PrismaService);
  });

  it('should create user successfully', async () => {
    // Arrange
    const userData = { email: 'test@example.com', name: 'Test User' };
    const expectedUser = { id: 1, ...userData };
    
    jest.spyOn(prisma.user, 'create').mockResolvedValue(expectedUser);
    
    // Act
    const result = await service.create(userData);
    
    // Assert
    expect(result).toEqual(expectedUser);
    expect(prisma.user.create).toHaveBeenCalledWith({ data: userData });
  });
});
```

### Integration Testing
```typescript
describe('UserService Integration', () => {
  let app: INestApplication;
  let prisma: PrismaService;

  beforeAll(async () => {
    const moduleFixture = await Test.createTestingModule({
      imports: [AppModule],
    }).compile();

    app = moduleFixture.createNestApplication();
    await app.init();
    
    prisma = app.get<PrismaService>(PrismaService);
  });

  afterEach(async () => {
    // Clean up test data
    await prisma.user.deleteMany();
  });

  afterAll(async () => {
    await app.close();
  });

  it('should create and find user', async () => {
    // Test with real database
    const userData = { email: 'test@example.com', name: 'Test User' };
    
    const user = await prisma.user.create({ data: userData });
    expect(user.email).toBe(userData.email);
    
    const found = await prisma.user.findUnique({ where: { id: user.id } });
    expect(found).toEqual(user);
  });
});
```

## Performance Considerations

### Indexing
```prisma
model User {
  id    Int     @id @default(autoincrement())
  email String  @unique
  name  String
  
  @@index([email])
  @@index([name])
}
```

### Query Optimization
```typescript
// ‚úÖ Efficient queries
const users = await this.prisma.user.findMany({
  where: { email: { contains: 'test' } },
  select: { id: true, email: true, name: true },
  take: 10,
  orderBy: { createdAt: 'desc' }
});

// ‚ùå Avoid N+1 queries
const users = await this.prisma.user.findMany();
for (const user of users) {
  const posts = await this.prisma.post.findMany({ where: { userId: user.id } });
}
```

### Pagination
```typescript
async findMany(page: number = 1, limit: number = 10): Promise<{ users: User[]; total: number }> {
  const skip = (page - 1) * limit;
  
  const [users, total] = await Promise.all([
    this.prisma.user.findMany({
      skip,
      take: limit,
      orderBy: { createdAt: 'desc' }
    }),
    this.prisma.user.count()
  ]);
  
  return { users, total };
}
``` 