// Auto-generated schema from modular files
// Last updated: 2025-07-01T17:18:43.315Z
// Merged modules: all core modules

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  // Relations
  roles         UserRole[]
  auditLogs     AuditLog[]
  assignedRoles UserRole[] @relation("AssignedBy")

  @@map("users")
}

model Permission {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String
  resource    String
  action      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  roles RolePermission[]

  @@unique([resource, action])
  @@map("permissions")
}

model Role {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  permissions RolePermission[]
  users       UserRole[]

  @@map("roles")
}

model RolePermission {
  id           Int        @id @default(autoincrement())
  roleId       Int
  permissionId Int
  createdAt    DateTime   @default(now())

  // Relations
  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
  @@map("role_permissions")
}

model UserRole {
  id         Int      @id @default(autoincrement())
  userId     Int
  roleId     Int
  assignedAt DateTime @default(now())
  assignedBy Int

  // Relations
  user     User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role     Role @relation(fields: [roleId], references: [id], onDelete: Cascade)
  assigner User @relation("AssignedBy", fields: [assignedBy], references: [id])

  @@unique([userId, roleId])
  @@map("user_roles")
}

model AuditLog {
  id           Int          @id @default(autoincrement())
  userId       Int?
  action       String
  resource     String
  resourceId   String?
  details      Json?
  metadata     Json?
  ipAddress    String?
  userAgent    String?
  timestamp    DateTime     @default(now())
  status       AuditStatus  @default(SUCCESS)
  errorMessage String?

  // Relations
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([action])
  @@index([resource])
  @@index([timestamp])
  @@index([status])
  @@map("audit_logs")
}

enum AuditStatus {
  SUCCESS
  FAILED
  PENDING
}
